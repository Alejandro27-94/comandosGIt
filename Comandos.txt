*** GIT  ***

COMANDOS 

pwd: nos muestra la carpeta actual en la que nos encontramos.
mkdir: nos permite crear carpetas, p. ej. mkdir NuevaCarpeta
touch: nos permite crear archivos nuevos, p.ej. touch NuevoArchivo.txt
cat: nos permite ver el contenido de un archivo, p.ej. cat NuevoArchivo.txt
cd: nos permite cambiarnos de carpeta, p.ej. cd NuevaCarpeta.
cd .. : nos permite regresar al directorio o carpeta anterior.
cd o cd ~: nos lleva a la ruta del usuario.
cd /c: nos vamos al disco C:/.
cd -: nos lleva directamente al ultimo directorio visitado.
ls: nos permite ver los archivos de la carpeta donde estamos actualmente.
ls -l: Ver todos los archivos como una lista en donde incluye el usuario, grupo, permisos sobre el archivo, tamaño, fecha y hora de creación.
ls -lh: Muestra la misma información que ls-l pero con unidades de tamaño, es decir, kb o mb.
ls-R: muestra el contenido de todos los sudirectorios de forma recursiva.
ls -S Ordena los resultados por tamaño de archivo.
rm: Nos permite borrar un archivo o carpeta ej: rm NuevoArchivo.txt
rmdir “nombre del directorio”/: borrar un directorio: Solo funciona con directorios vacíos.
rm -r ‘nombre de la carpeta’ :me permite eliminar la carpeta y los archivos dentro de ella de forma recursiva.
cp “nombre del archivo que quremos copiar” “nombre del directorio a donde lo queremos copiar”: nos permite copiar un archivo.
mv “el directorio de donde queremos mover/el nombre del archivo” “el directorio hacia donde lo queremos mover”: nos permite mover un archivo.
clear: nos permite limpiar la pantalla.
history: ver los últimos comandos que ejecutamos y un número especial con el que podemos volver a repetir el comando.

git status: podemos ver el estado git de los archivos de la ruta 
git add: git add <file> <file> ... asi podemos agregar el archivo que deseamos a git
git commit -m: se compromenten (cargan) los archivos, la '-m' mensaje 
git restore --stage <file>: Recuperamos el archivo que hemos eliminado
git ignore: se crea un archivo con este nombre, dentro de este se nombran los archivos que queremos sean ignorados
git log --oneline: nos lista los commit que hemos hecho 
git branch: Muestra la rama donde estamos trabajando
git checkout -b 'ramaB': Elejimos o creamos la rama para trabajar, independiente a la rama principal
git merge 'ramaB': asi podemos elegir la rama que deseamos traer a la rama main, este comando desde la rama main




*** GITHUB ***  

Debemos crear un nuevo repositorio en GitHub 

git init: inicializamos un repositorio 
git config --global -e: lista la configuracion de nuestra terminal
git config --global core.editor "code --true": configuramos nuestro respaldo proveniente de WSO
git pull origin main: Actualiza tu repositorio local
git remote add origin https://github.com/Alejandro27-94/comandosGIt.git: esta linea de codigo que arroja GitHub se copia en la terminal 
git push -u origin main : podemos subir los cambios

